# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/classes.ipynb.

# %% auto 0
__all__ = ['HoloPheno']

# %% ../nbs/classes.ipynb 3
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
import scipy 
from scipy import stats
import numpy as np
from matplotlib.patches import Ellipse
import matplotlib.transforms as transforms
import io
import sklearn
import os
import matplotlib.patches as patches
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA, FactorAnalysis
import holopheno


# %% ../nbs/classes.ipynb 4
class HoloPheno(object):
    
    """
    Class for visualizing behavior data in reduced dimensions.
    """

    def __init__(self, data, X = None, Y = None):
        """

        Reads and stores information from 

        Parameters

        -------
        

        Returns
        -------
        
        """
        import pandas as pd
        from holopheno.plot_tools import scale_with_columns
        self.data_in = data.dropna().reset_index(drop = True).copy()
        self.X = X
        self.Y = Y
        self.summarize() 
        self.scaled_data = pd.concat([self.data_in[X], scale_with_columns(self.data_in[Y])], axis = 1)
        
    def summarize(self):

        self.summary = {}
        self.summary['sample_size'] = len(self.data_in)
        if self.X:
            for x in self.X:
                self.summary['unique ' + x + ' values'] = self.data_in[x].unique()
        print('Data info: \n')
        for i, (k, v) in enumerate(self.summary.items()):
            print(k,  v)
        
    def scatter(self, x, y, group_by, type = 'raw'):
        from holopheno.plot_tools import scatter_with_ellipse
        if type == 'raw':
            data = self.data_in
        elif type == 'scaled':
            data = self.scaled_data
        f =  scatter_with_ellipse(data, x, y, group_by)
        
    def scatter_3d(self, metrics, color_by, palette = None, type = 'raw'):
        from holopheno.plot_tools import plot_3d_scatter
        if type == 'raw':
            data = self.data_in
        elif type == 'scaled':
            data = self.scaled_data
        plot_3d_scatter(data, metrics, color_by, palette)
        
