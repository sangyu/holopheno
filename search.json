[
  {
    "objectID": "API/read_data.html",
    "href": "API/read_data.html",
    "title": "api",
    "section": "",
    "text": "source\n\nread_data\n\n read_data (data, x=None, y=None)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "holopheno",
    "section": "",
    "text": "In the local directory “../holopheno”\npip install ."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "holopheno",
    "section": "",
    "text": "In the local directory “../holopheno”\npip install ."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "holopheno",
    "section": "How to use",
    "text": "How to use\n\nimport holopheno"
  },
  {
    "objectID": "Tutorials/pca analysis.html",
    "href": "Tutorials/pca analysis.html",
    "title": "PCA Analysis",
    "section": "",
    "text": "import holopheno\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\n\npenguins = load_penguins()\nx_columns = ['species', 'island', 'sex']\ny_columns = ['bill_length_mm', \n                   'bill_depth_mm', \n                   'flipper_length_mm', \n                   'body_mass_g', ]\npenguins_h = holopheno.read_data(penguins, x = x_columns, y = y_columns);\n\nData info: \n\nsample_size 333\nunique species values ['Adelie' 'Gentoo' 'Chinstrap']\nunique island values ['Torgersen' 'Biscoe' 'Dream']\nunique sex values ['male' 'female']\n\n\n\n\n\n\n\n\npca, f = penguins_h.dim_red_by_pca()\n\n\n\n\n\n\n\n\npca = penguins_h.dim_red_by_pca(n_components = 3, plot_variance_explained= False)\npenguins_h.transform_with_pca(pca)\n\n\n\n\n\n# %matplotlib inline\npalette = {'Adelie': 'orangered', 'Gentoo': 'steelblue', 'Chinstrap': 'seagreen'}\nf_PC_3d = penguins_h.scatter_3d(['PC1', 'PC2', 'PC3'], color_by = 'species', palette = palette, type = 'scaled')"
  },
  {
    "objectID": "Tutorials/pca analysis.html#import-libraries-and-load-data",
    "href": "Tutorials/pca analysis.html#import-libraries-and-load-data",
    "title": "PCA Analysis",
    "section": "",
    "text": "import holopheno\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\n\npenguins = load_penguins()\nx_columns = ['species', 'island', 'sex']\ny_columns = ['bill_length_mm', \n                   'bill_depth_mm', \n                   'flipper_length_mm', \n                   'body_mass_g', ]\npenguins_h = holopheno.read_data(penguins, x = x_columns, y = y_columns);\n\nData info: \n\nsample_size 333\nunique species values ['Adelie' 'Gentoo' 'Chinstrap']\nunique island values ['Torgersen' 'Biscoe' 'Dream']\nunique sex values ['male' 'female']\n\n\n\n\n\n\n\n\npca, f = penguins_h.dim_red_by_pca()\n\n\n\n\n\n\n\n\npca = penguins_h.dim_red_by_pca(n_components = 3, plot_variance_explained= False)\npenguins_h.transform_with_pca(pca)\n\n\n\n\n\n# %matplotlib inline\npalette = {'Adelie': 'orangered', 'Gentoo': 'steelblue', 'Chinstrap': 'seagreen'}\nf_PC_3d = penguins_h.scatter_3d(['PC1', 'PC2', 'PC3'], color_by = 'species', palette = palette, type = 'scaled')"
  },
  {
    "objectID": "Tutorials/visualising the data.html",
    "href": "Tutorials/visualising the data.html",
    "title": "Simple visualisations",
    "section": "",
    "text": "import holopheno\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\n\npenguins = load_penguins()\nx_columns = ['species', 'island', 'sex']\ny_columns = [\n                    'bill_length_mm', \n                   'bill_depth_mm', \n                   'flipper_length_mm', \n                   'body_mass_g', \n                  ]\npenguins_h = holopheno.read_data(penguins, x = x_columns, y = y_columns)\n\nData info: \n\nsample_size 333\nunique species values ['Adelie' 'Gentoo' 'Chinstrap']\nunique island values ['Torgersen' 'Biscoe' 'Dream']\nunique sex values ['male' 'female']\n\n\n\npenguins\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nmale\n2009\n\n\n340\nChinstrap\nDream\n43.5\n18.1\n202.0\n3400.0\nfemale\n2009\n\n\n341\nChinstrap\nDream\n49.6\n18.2\n193.0\n3775.0\nmale\n2009\n\n\n342\nChinstrap\nDream\n50.8\n19.0\n210.0\n4100.0\nmale\n2009\n\n\n343\nChinstrap\nDream\n50.2\n18.7\n198.0\n3775.0\nfemale\n2009\n\n\n\n\n344 rows × 8 columns\n\n\n\n\n\n\n# penguins_h.scatter('bill_length_mm', 'body_mass_g', group_by = 'species', type = 'raw');\npenguins_h.scatter('bill_length_mm', 'body_mass_g', group_by = 'species', type = 'scaled');\n\nPlotting for the conditions species:\nAdelie\nGentoo\nChinstrap\n\n\n\n\n\n\n\n\n\npalette = {'Adelie': 'orangered', 'Gentoo': 'steelblue', 'Chinstrap': 'seagreen'}\nf = penguins_h.scatter_3d(['bill_length_mm', 'bill_depth_mm', 'body_mass_g'], color_by = 'species', palette = palette, type = 'raw');\n\n\n\n\n\npenguins_h.heatmap_zscore(group_by=['sex', 'species'], fig_size = None, ax = None, heatmap_kwargs = {'cmap': 'vlag'} );\n\n\n\n\n\npenguins_h.heatmap_zscore(group_by=['sex', 'species'], ax = None, plot_clustermap = True);"
  },
  {
    "objectID": "Tutorials/visualising the data.html#import-libraries-and-load-the-data",
    "href": "Tutorials/visualising the data.html#import-libraries-and-load-the-data",
    "title": "Simple visualisations",
    "section": "",
    "text": "import holopheno\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\n\npenguins = load_penguins()\nx_columns = ['species', 'island', 'sex']\ny_columns = [\n                    'bill_length_mm', \n                   'bill_depth_mm', \n                   'flipper_length_mm', \n                   'body_mass_g', \n                  ]\npenguins_h = holopheno.read_data(penguins, x = x_columns, y = y_columns)\n\nData info: \n\nsample_size 333\nunique species values ['Adelie' 'Gentoo' 'Chinstrap']\nunique island values ['Torgersen' 'Biscoe' 'Dream']\nunique sex values ['male' 'female']\n\n\n\npenguins\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nmale\n2009\n\n\n340\nChinstrap\nDream\n43.5\n18.1\n202.0\n3400.0\nfemale\n2009\n\n\n341\nChinstrap\nDream\n49.6\n18.2\n193.0\n3775.0\nmale\n2009\n\n\n342\nChinstrap\nDream\n50.8\n19.0\n210.0\n4100.0\nmale\n2009\n\n\n343\nChinstrap\nDream\n50.2\n18.7\n198.0\n3775.0\nfemale\n2009\n\n\n\n\n344 rows × 8 columns\n\n\n\n\n\n\n# penguins_h.scatter('bill_length_mm', 'body_mass_g', group_by = 'species', type = 'raw');\npenguins_h.scatter('bill_length_mm', 'body_mass_g', group_by = 'species', type = 'scaled');\n\nPlotting for the conditions species:\nAdelie\nGentoo\nChinstrap\n\n\n\n\n\n\n\n\n\npalette = {'Adelie': 'orangered', 'Gentoo': 'steelblue', 'Chinstrap': 'seagreen'}\nf = penguins_h.scatter_3d(['bill_length_mm', 'bill_depth_mm', 'body_mass_g'], color_by = 'species', palette = palette, type = 'raw');\n\n\n\n\n\npenguins_h.heatmap_zscore(group_by=['sex', 'species'], fig_size = None, ax = None, heatmap_kwargs = {'cmap': 'vlag'} );\n\n\n\n\n\npenguins_h.heatmap_zscore(group_by=['sex', 'species'], ax = None, plot_clustermap = True);"
  },
  {
    "objectID": "Tutorials/applying to effect sizes.html",
    "href": "Tutorials/applying to effect sizes.html",
    "title": "Apply to effect size",
    "section": "",
    "text": "import holopheno\nimport pandas as pd\nimport numpy as np\nimport dabest\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nprint(\"We're using DABEST v{}\".format(dabest.__version__))\n\nWe're using DABEST v2023.03.29\n\n\n\naxis_text_size = 14\nraw_marker_size = 5\nes_marker_size = 7\n\n\nfrom scipy.stats import norm # Used in generation of populations.\nnp.random.seed(9999) # Fix the seed so the results are replicable.\n\n# Create samples\nN = 20\nt_size = norm.rvs(loc=3, scale=0.4, size=N*4)\nt_size[N:2*N] = t_size[N:2*N]+1\nt_size[2*N:3*N] = t_size[2*N:3*N]-0.5\n\nsurvival = norm.rvs(loc=15, scale=3, size=N*4)\nsurvival[N:2*N] = survival[N:2*N]-8\nsurvival[2*N:3*N] = survival[2*N:3*N]-0.5\n\n\nside_effects = norm.rvs(loc=0.4, scale=0.02, size=N*4)\n# side_effects[N:2*N] = side_effects[N:2*N]\nside_effects[2*N::] = side_effects[2*N::]+0.04\n\n\n\n\n# Add a `Treatment` column\nt1 = np.repeat('Placebo', N*2).tolist()\nt2 = np.repeat('Drug', N*2).tolist()\ntreatment = t1 + t2 \n\n# Add a `Rep` column as the first variable for the 2 replicates of experiments done\nrep = []\nfor i in range(N*2):\n    rep.append('Rep1')\n    rep.append('Rep2')\n\n# Add a `Genotype` column as the second variable\nwt = np.repeat('W', N).tolist()\nmt = np.repeat('M', N).tolist()\nwt2 = np.repeat('W', N).tolist()\nmt2 = np.repeat('M', N).tolist()\n\n\ngenotype = wt + mt + wt2 + mt2\n\n# Add an `id` column for paired data plotting.\nid = list(range(0, N*2))\nid_col = id + id \n\n\n# Combine all columns into a DataFrame.\ndf_delta2 = pd.DataFrame({'ID'        : id_col,\n                  'Rep'      : rep,\n                   'Genotype'  : genotype, \n                   'Treatment': treatment,\n                   'Tumor Size'         : t_size,\n                   'Survival'         : survival,\n                   'Side Effects'         : side_effects\n                })\n\n\n\n\n# drug 2\nnp.random.seed(20) # Fix the seed so the results are replicable.\n\n# Create samples\nN = 35\nt_size_drug2 = norm.rvs(loc=3, scale=0.3, size=N*4)\nt_size_drug2[N:2*N] = t_size_drug2[N:2*N]+0.75\nt_size_drug2[2*N:3*N] = t_size_drug2[2*N:3*N]-0.3\n\nsurvival_drug2 = norm.rvs(loc=15, scale=10, size=N*4)\nsurvival_drug2[N:2*N] = survival_drug2[N:2*N]-8\nsurvival_drug2[3*N:4*N] = survival_drug2[3*N:4*N]-6.5\n\nside_effects_drug2 = norm.rvs(loc=0.4, scale=0.3, size=N*4)\n# side_effects[N:2*N] = side_effects[N:2*N]\nside_effects_drug2[2*N::] = side_effects_drug2[2*N::]+0.06\n\n\n\n\n# Add a `Treatment` column\nt1 = np.repeat('Placebo', N*2).tolist()\nt2 = np.repeat('Drug', N*2).tolist()\ntreatment = t1 + t2 \n\n# Add a `Rep` column as the first variable for the 2 replicates of experiments done\nrep = []\nfor i in range(N*2):\n    rep.append('Rep1')\n    rep.append('Rep2')\n\n# Add a `Genotype` column as the second variable\nwt = np.repeat('W', N).tolist()\nmt = np.repeat('M', N).tolist()\nwt2 = np.repeat('W', N).tolist()\nmt2 = np.repeat('M', N).tolist()\n\n\ngenotype = wt + mt + wt2 + mt2\n\n# Add an `id` column for paired data plotting.\nid = list(range(0, N*2))\nid_col = id + id \n\n\n# Combine all columns into a DataFrame.\ndf_delta2_drug2 = pd.DataFrame({'ID'        : id_col,\n                  'Rep'      : rep,\n                   'Genotype'  : genotype, \n                   'Treatment': treatment,\n                   'Tumor Size'         : t_size_drug2,\n                   'Survival'         : survival_drug2,\n                   'Side Effects'         : side_effects_drug2\n                })\n\n\ndf_delta2['Drug'] = 1\ndf_delta2_drug2['Drug'] = 2\ndf = pd.concat([df_delta2, df_delta2_drug2], axis =0)\n\n\nanalysis_matrix = pd.DataFrame(columns = ['Drug', 'Tumor Size', 'Survival', 'Side Effects'], index = [0, 1])\nanalysis_matrix\ndeltags = analysis_matrix.copy()\nbca_highs = analysis_matrix.copy()\nbca_lows = analysis_matrix.copy()\ncontrasts = []\nfor i in deltags.index:\n    df0 = df.loc[df['Drug'] == i+1]\n    deltags['Drug'][i] = i +1\n    bca_highs['Drug'][i] = i +1\n    bca_lows['Drug'][i] = i +1\n    for col in deltags.columns[1::]:\n        contrast = dabest.load(data = df0, x = [\"Genotype\", \"Genotype\"], y = col, delta2 = True, experiment = \"Treatment\")\n        contrasts.append(contrast)\n        deltags[col][i] = contrast.delta_g.delta_delta.difference\n        bca_highs[col][i] = contrast.delta_g.delta_delta.bca_high        \n        bca_lows[col][i] = contrast.delta_g.delta_delta.bca_low\n\n\ndef forest_plot(contrasts, items, ax = None, colors = None):\n    def halfviolin(v, half='right', fill_color='k', alpha=1,\n                line_color='k', line_width=0):\n        import numpy as np\n    \n        for b in v['bodies']:\n            V = b.get_paths()[0].vertices\n    \n            mean_vertical = np.mean(V[:, 0])\n            mean_horizontal = np.mean(V[:, 1])\n    \n            if half == 'right':\n                V[:, 0] = np.clip(V[:, 0], mean_vertical, np.inf)\n            elif half == 'left':\n                V[:, 0] = np.clip(V[:, 0], -np.inf, mean_vertical)\n            elif half == 'bottom':\n                V[:, 1] = np.clip(V[:, 1], -np.inf, mean_horizontal)\n            elif half == 'top':\n                V[:, 1] = np.clip(V[:, 1], mean_horizontal, np.inf)\n    \n            b.set_color(fill_color)\n            b.set_alpha(alpha)\n            b.set_edgecolor(line_color)\n            b.set_linewidth(line_width)\n    DDbootstraps = [c.delta_g.delta_delta.bootstraps_delta_delta for c in contrasts]\n\n    import matplotlib.pyplot as plt\n    default_violinplot_kwargs = {'widths':0.5, 'vert':True,\n                                   'showextrema':False, 'showmedians':False}\n    v = ax.violinplot(DDbootstraps, **default_violinplot_kwargs)\n    halfviolin(v, alpha = 0.4)\n\n\n    ax.plot([0, len(contrasts)+1], [0, 0], 'k', linewidth = 1)\n    ticks = list(range(1, len(contrasts)+1))\n    for i in ticks:\n        ax.plot(i, contrasts[i-1].delta_g.delta_delta.difference, 'k.', markersize = 20)\n        ax.plot([i, i], [contrasts[i-1].delta_g.delta_delta.bca_high, contrasts[i-1].delta_g.delta_delta.bca_low], 'k', linewidth = 2.5)\n    ax.set_xticks(ticks)\n    ax.set_xlim([0, len(contrasts)+1])\n    ax.set_xticklabels(items,\n                      rotation = 45, ha = 'right', fontsize = 20)\n    ax.set_ylabel('$\\Delta$s\\' g (p.s.d.)', fontsize = 20)\n    # ax.set_ylim(-0.5, 0.2)\n    ax.spines['bottom'].set_color(None)\n    ax.spines['top'].set_color(None)\n    ax.spines['right'].set_color(None)\n    # ax.spines['left'].set_color(None)\n    if colors:\n        for i in range(len(colors)):\n            ax.collections[i].set_fc(colors[i])\n    \n    \nf_forest_drug_profiles, axes  = plt.subplots(1, 1);\nitems = ['Drug 1 Tumor Size', 'Drug 1 Survival', 'Drug 1 Side Effects', 'Drug 1 Tumor Size', 'Drug 1 Survival', 'Drug 1 Side Effects']\ncolors = ['steelblue', 'orangered', 'seagreen', 'steelblue', 'orangered', 'seagreen']\nforest_plot(contrasts, items, ax = axes,colors = colors );\naxes.set_ylim(-4, 4);\n\n\n# f_forest_drug_profiles.savefig('forest_drug_profiles.png', dpi = 300)\n# f_forest_drug_profiles.savefig('forest_drug_profiles.svg')\n\n\n\n\n\ndeltags\n\n\n\n\n\n\n\n\nDrug\nTumor Size\nSurvival\nSide Effects\n\n\n\n\n0\n1\n-2.106681\n1.684629\n-0.73398\n\n\n1\n2\n-1.331807\n0.522072\n0.242906\n\n\n\n\n\n\n\n\ndeltags\nplt.figure()\nfrom holopheno.plot_tools import plot_heatmap\nplot_heatmap(deltags, group_by = 'Drug',plot_clustermap=True, fig_size=(2, 1));\n# from holopheno import plot_heatmap\n# plot_heatmap(data = deltags, group_by = None )\n\nTypeError: plot_heatmap() got an unexpected keyword argument 'plot_clustermap'\n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\n# figure, axes = plt.subplots()\n# group_by = 'Drug'\n# pltdf = deltags[deltags.columns[1::]]\n# cidf = bca_highs[deltags.columns[1::]] -  deltags[deltags.columns[1::]]\n# for i in pltdf.index:\n#     for c in range(len(pltdf.columns)):\n#         print([i, c])\n#         print(cidf.iloc[i, c])\n#         effectsizes = plt.Circle(( c, 1-i), cidf.iloc[i, c]/2)\n#         axes.set_aspect( 1 )\n#         axes.add_artist( effectsizes )\n#         axes.set_ylim(-1, 2)\n#         axes.set_xlim(-1, 3)\n# plt.title( 'Colored Circle' )\n# plt.show()\n\n[0, 0]\n0.9108608628153056\n[0, 1]\n0.8847603018317693\n[0, 2]\n0.8822543061296033\n[1, 0]\n0.6748854341387547\n[1, 1]\n0.6841834635821201\n[1, 2]\n0.6890129869622614\n\n\n\n\n\n\n# deltags_melted = deltags.melt(id_vars=['Drug'], value_vars=deltags.columns[1::])\n# map_metrics={'Tumor Size': .1, 'Survival': .2, 'Side Effects': .3}\n# deltags_melted['Metric No'] = [map_metrics[i] for i in deltags_melted['variable']]\n\n# bca_highs_melted = bca_highs.melt(id_vars=['Drug'], value_vars=deltags.columns[1::])\n# deltags_melted['Size'] = (bca_highs_melted['value'] - deltags_melted['value'])\n\n\n# sns.scatterplot(data=deltags_melted, x=\"Metric No\", y=\"Drug\", hue=\"value\", palette = 'vlag', size = 'Size')\n\n&lt;AxesSubplot: xlabel='Metric No', ylabel='Drug'&gt;"
  },
  {
    "objectID": "Tutorials/reading data.html",
    "href": "Tutorials/reading data.html",
    "title": "Reading Data",
    "section": "",
    "text": "import holopheno\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n\n\n\n\n\n\nYou can use holopheno to easily visualize scatters of individual data points in the chosen dimensions\nTo do that, you need to first tell indicate which are the independent variable columns and which are the dependent variable columns in the dataframe\n\nx_columns = ['species', 'island', 'sex']\ny_columns = [\n                    'bill_length_mm', \n                   'bill_depth_mm', \n                   'flipper_length_mm', \n                   'body_mass_g', \n                  ]\n\n\n\n.read_data() constructs a holophno object and gives you some basic info about the data\n\npenguins_h = holopheno.read_data(penguins, x = x_columns, y = y_columns)\n\nData info: \n\nsample_size 333\nunique species values ['Adelie' 'Gentoo' 'Chinstrap']\nunique island values ['Torgersen' 'Biscoe' 'Dream']\nunique sex values ['male' 'female']"
  },
  {
    "objectID": "API/classes.html",
    "href": "API/classes.html",
    "title": "classes",
    "section": "",
    "text": "source\n\nHoloPheno\n\n HoloPheno (data, x=None, y=None)\n\nClass for visualizing behavior data in reduced dimensions."
  },
  {
    "objectID": "API/plot_tools.html",
    "href": "API/plot_tools.html",
    "title": "plot_tools",
    "section": "",
    "text": "source\n\nscatter_with_ellipse\n\n scatter_with_ellipse (data, x, y, group_by)\n\n\nsource\n\n\nplot_heatmap\n\n plot_heatmap (data, group_by=None, fig_size=None, ax=None,\n               heatmap_kwargs={'cmap': 'vlag'}, plot_clustermap=False,\n               clustermap_kwargs={'cmap': 'vlag'})\n\n\nsource\n\n\nplot_3d_scatter\n\n plot_3d_scatter (data, metrics, color_by, palette)\n\n\nsource\n\n\nangle_between\n\n angle_between (v1, v2)\n\n\nsource\n\n\nunit_vector\n\n unit_vector (vector)\n\nReturns the unit vector of the vector.\n\nsource\n\n\nregscatter\n\n regscatter (data, x, y, ax, n_std=2, scatter=True, fit_reg=False,\n             plot_ellipse=True, show_title=True, color='gray',\n             ellipseColor='red', **kwargs)\n\n\nsource\n\n\nconfidence_ellipse\n\n confidence_ellipse (x, y, ax, n_std=3.0, plotVector=True,\n                     facecolor='none', **kwargs)\n\nCreate a plot of the covariance confidence ellipse of x and y.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\n\n\n\n\n\ny\n\n\n\n\n\nax\nmatplotlib.axes.Axes\n\nThe axes object to draw the ellipse into.\n\n\nn_std\nfloat\n3.0\nThe number of standard deviations to determine the ellipse’s radiuses.\n\n\nplotVector\nbool\nTrue\n\n\n\nfacecolor\nstr\nnone\n\n\n\nkwargs\n\n\n\n\n\nReturns\nmatplotlib.patches.Ellipse\n\n\n\n\n\n\nsource\n\n\nsetFont\n\n setFont (fontSelection, fontSize, fontWeight='normal')\n\n\nsource\n\n\nscale_with_columns\n\n scale_with_columns (data)\n\n\nsource\n\n\ngenerate_x_y_dist\n\n generate_x_y_dist (N=100, x_range=[0, 100], y_range=[0, 200])"
  }
]